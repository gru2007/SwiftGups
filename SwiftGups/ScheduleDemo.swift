import Foundation

/// –î–µ–º–æ-–∫–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
@MainActor
class ScheduleDemo {
    
    private let apiClient = DVGUPSAPIClient()
    private let scheduleService = ScheduleService()
    
    /// –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –ø–∞—Ä—Å–µ—Ä–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    func runDemo() async {
        print("üéì –î–µ–º–æ –ø–∞—Ä—Å–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –î–í–ì–£–ü–° v2.0")
        print(String(repeating: "=", count: 50))
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        await testFaculties()
        await testGroupsLoading()
        await testScheduleLoading()
        await testWeekSchedule()
        await testScheduleService()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
    private func testFaculties() async {
        print("\nüìö –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤...")
        
        let faculties = Faculty.allFaculties
        print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(faculties.count) —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤:")
        
        for (index, faculty) in faculties.prefix(5).enumerated() {
            print("   \(index + 1). [\(faculty.id)] \(faculty.name)")
        }
        
        if faculties.count > 5 {
            print("   ... –∏ –µ—â–µ \(faculties.count - 5) —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤")
        }
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø
    private func testGroupsLoading() async {
        print("\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø...")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ò–Ω—Å—Ç–∏—Ç—É—Ç–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π (ID: 2)
        let facultyId = "2"
        let facultyName = Faculty.allFaculties.first { $0.id == facultyId }?.name ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∞–∫—É–ª—å—Ç–µ—Ç"
        
        print("üèõÔ∏è –§–∞–∫—É–ª—å—Ç–µ—Ç: \(facultyName) (ID: \(facultyId))")
        print("üìÖ –î–∞—Ç–∞: \(DateFormatter.displayDateFormatter.string(from: Date()))")
        
        do {
            let groups = try await apiClient.fetchGroups(for: facultyId, date: Date())
            print("‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ \(groups.count) –≥—Ä—É–ø–ø")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –≥—Ä—É–ø–ø
            for (index, group) in groups.prefix(5).enumerated() {
                print("   \(index + 1). [\(group.id)] \(group.name) - \(group.fullName)")
            }
            
            if groups.count > 5 {
                print("   ... –∏ –µ—â–µ \(groups.count - 5) –≥—Ä—É–ø–ø")
            }
            
            // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–µ—Ä–≤–æ–π –≥—Ä—É–ø–ø–æ–π –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
            if let firstGroup = groups.first {
                await testSingleGroupSchedule(groupId: firstGroup.id, groupName: firstGroup.name)
            }
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø: \(error.localizedDescription)")
        }
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    private func testScheduleLoading() async {
        print("\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —Å —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–æ–π
        let testGroupId = "58031"
        await testSingleGroupSchedule(groupId: testGroupId, groupName: "–¢–µ—Å—Ç–æ–≤–∞—è –≥—Ä—É–ø–ø–∞")
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    private func testSingleGroupSchedule(groupId: String, groupName: String) async {
        print("\n   üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã: \(groupName) (ID: \(groupId))")
        
        do {
            let schedule = try await apiClient.fetchSchedule(for: groupId, startDate: Date())
            print("   ‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
            print("   üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print("      - –ì—Ä—É–ø–ø–∞: \(schedule.groupName)")
            print("      - –ü–µ—Ä–∏–æ–¥: \(DateFormatter.displayDateFormatter.string(from: schedule.startDate)) - \(DateFormatter.displayDateFormatter.string(from: schedule.endDate))")
            print("      - –î–Ω–µ–π —Å –∑–∞–Ω—è—Ç–∏—è–º–∏: \(schedule.days.count)")
            
            var totalLessons = 0
            for day in schedule.days {
                totalLessons += day.lessons.count
            }
            print("      - –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: \(totalLessons)")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è
            if let firstDay = schedule.days.first {
                print("   üìù –ü–µ—Ä–≤—ã–π –¥–µ–Ω—å (\(firstDay.weekday), \(DateFormatter.apiDateFormatter.string(from: firstDay.date))):")
                for (index, lesson) in firstDay.lessons.prefix(3).enumerated() {
                    print("      \(index + 1). \(lesson.pairNumber) –ø–∞—Ä–∞: \(lesson.subject)")
                    print("         –¢–∏–ø: \(lesson.type.rawValue)")
                    print("         –í—Ä–µ–º—è: \(lesson.timeStart)-\(lesson.timeEnd)")
                    if let teacher = lesson.teacher {
                        print("         –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: \(teacher.name)")
                    }
                    if let room = lesson.room, !room.isEmpty {
                        print("         –ê—É–¥–∏—Ç–æ—Ä–∏—è: \(room)")
                    }
                }
                
                if firstDay.lessons.count > 3 {
                    print("      ... –∏ –µ—â–µ \(firstDay.lessons.count - 3) –∑–∞–Ω—è—Ç–∏–π")
                }
            }
            
        } catch {
            print("   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error.localizedDescription)")
        }
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    private func testWeekSchedule() async {
        print("\nüìÜ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏
        let calendar = Calendar.current
        let today = Date()
        let weekday = calendar.component(.weekday, from: today)
        let daysFromMonday = (weekday + 5) % 7
        
        guard let startOfWeek = calendar.date(byAdding: .day, value: -daysFromMonday, to: today),
              let endOfWeek = calendar.date(byAdding: .day, value: 6, to: startOfWeek) else {
            print("‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–µ–¥–µ–ª–∏")
            return
        }
        
        let formatter = DateFormatter()
        formatter.dateFormat = "dd MMM"
        formatter.locale = Locale(identifier: "ru_RU")
        
        let weekRange = "\(formatter.string(from: startOfWeek)) - \(formatter.string(from: endOfWeek))"
        print("üìÖ –¢–µ—Å—Ç–æ–≤–∞—è –Ω–µ–¥–µ–ª—è: \(weekRange)")
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å —Ç–µ—Å—Ç–æ–≤–æ–π –≥—Ä—É–ø–ø–æ–π
        let testGroupId = "58031"
        do {
            let schedule = try await apiClient.fetchSchedule(
                for: testGroupId,
                startDate: startOfWeek,
                endDate: endOfWeek
            )
            
            print("‚úÖ –ù–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ")
            print("üìä –ù–∞ –Ω–µ–¥–µ–ª–µ:")
            print("   - –î–Ω–µ–π —Å –∑–∞–Ω—è—Ç–∏—è–º–∏: \(schedule.days.count)")
            
            var totalLessons = 0
            for day in schedule.days {
                totalLessons += day.lessons.count
                print("   - \(day.weekday): \(day.lessons.count) –∑–∞–Ω—è—Ç–∏–π")
            }
            print("   - –í—Å–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π: \(totalLessons)")
            
        } catch {
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: \(error.localizedDescription)")
        }
    }
    
    /// –¢–µ—Å—Ç–∏—Ä—É–µ—Ç ScheduleService
    private func testScheduleService() async {
        print("\nüîß –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ScheduleService...")
        
        // –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç
        if let faculty = scheduleService.faculties.first(where: { $0.id == "2" }) {
            print("üèõÔ∏è –í—ã–±–∏—Ä–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç: \(faculty.name)")
            scheduleService.selectFaculty(faculty)
            
            // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≥—Ä—É–ø–ø
            try? await Task.sleep(nanoseconds: 2_000_000_000) // 2 —Å–µ–∫—É–Ω–¥—ã
            
            print("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ \(scheduleService.groups.count) –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å")
            
            if let firstGroup = scheduleService.groups.first {
                print("üë• –í—ã–±–∏—Ä–∞–µ–º –≥—Ä—É–ø–ø—É: \(firstGroup.name)")
                scheduleService.selectGroup(firstGroup)
                
                // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
                try? await Task.sleep(nanoseconds: 3_000_000_000) // 3 —Å–µ–∫—É–Ω–¥—ã
                
                if let schedule = scheduleService.currentSchedule {
                    print("‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å")
                    print("üìä –î–Ω–µ–π: \(schedule.days.count)")
                } else if let error = scheduleService.errorMessage {
                    print("‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: \(error)")
                } else {
                    print("‚è≥ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                }
            }
        }
        
        // –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –ø–æ –Ω–µ–¥–µ–ª—è–º
        print("\nüìÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –Ω–µ–¥–µ–ª—è–º:")
        print("   –¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: \(scheduleService.currentWeekRange())")
        
        scheduleService.nextWeek()
        print("   –°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è: \(scheduleService.currentWeekRange())")
        
        scheduleService.previousWeek()
        scheduleService.previousWeek()
        print("   –ü—Ä–µ–¥—ã–¥—É—â–∞—è –Ω–µ–¥–µ–ª—è: \(scheduleService.currentWeekRange())")
        
        scheduleService.goToCurrentWeek()
        print("   –í–æ–∑–≤—Ä–∞—Ç –∫ —Ç–µ–∫—É—â–µ–π: \(scheduleService.currentWeekRange())")
    }
}

// MARK: - –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞

extension ScheduleDemo {
    /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—é –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
    static func runDemoInBackground() {
        Task {
            let demo = ScheduleDemo()
            await demo.runDemo()
        }
    }
}