import Foundation

/// –û—à–∏–±–∫–∏ API –∫–ª–∏–µ–Ω—Ç–∞
enum APIError: Error, LocalizedError {
    case invalidURL
    case noData
    case parseError(String)
    case networkError(Error)
    case invalidResponse
    case groupNotFound
    case facultyNotFound
    case vpnOrBlockedNetwork
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL"
        case .noData:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ"
        case .parseError(let message):
            return "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: \(message)"
        case .networkError(let error):
            return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)"
        case .invalidResponse:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"
        case .groupNotFound:
            return "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        case .facultyNotFound:
            return "–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω"
        case .vpnOrBlockedNetwork:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –í–æ–∑–º–æ–∂–Ω–æ –≤–∫–ª—é—á–µ–Ω VPN –∏–ª–∏ —Å–µ—Ç—å –±–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∫ dvgups.ru. –û—Ç–∫–ª—é—á–∏—Ç–µ VPN/—Å–º–µ–Ω–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
        }
    }
}

/// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –î–í–ì–£–ü–°
@MainActor
class DVGUPSAPIClient: ObservableObject {
    
    // MARK: - –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
    
    private let baseURL = "https://dvgups.ru/index.php"
    private let itemId = "1246"
    private let option = "com_timetable"
    private let view = "newtimetable"
    
    private let session: URLSession
    
    // MARK: - –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    
    init(session: URLSession = .shared) {
        self.session = session
    }
    
    // MARK: - –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    func fetchGroups(for facultyId: String, date: Date = Date()) async throws -> [Group] {
        let dateString = DateFormatter.apiDateFormatter.string(from: date)
        let requestBody = "FacID=\(facultyId)&GroupID=no&Time=\(dateString)"
        
        print("üåê APIClient.fetchGroups() - Faculty: \(facultyId), Date: \(dateString)")
        print("üì§ Request body: \(requestBody)")
        
        let htmlResponse = try await performRequest(body: requestBody)
        let groups = parseGroups(from: htmlResponse, facultyId: facultyId)
        
        print("üîç Parsed \(groups.count) groups from response")
        if groups.isEmpty {
            print("‚ö†Ô∏è No groups found in HTML response for faculty \(facultyId)")
            // –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å HTML –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            let preview = String(htmlResponse.prefix(500))
            print("üìÑ HTML preview: \(preview)")
        }
        
        return groups
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
    func fetchSchedule(for groupId: String, startDate: Date = Date(), endDate: Date? = nil) async throws -> Schedule {
        let dateString = DateFormatter.apiDateFormatter.string(from: startDate)
        let requestBody = "GroupID=\(groupId)&Time=\(dateString)"
        
        let htmlResponse = try await performRequest(body: requestBody)
        return try parseSchedule(from: htmlResponse, groupId: groupId, startDate: startDate, endDate: endDate)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    func fetchScheduleByAuditorium(date: Date = Date()) async throws -> [ScheduleDay] {
        let dateString = DateFormatter.apiDateFormatter.string(from: date)
        let requestBody = "AudID=no&Time=\(dateString)"
        
        let htmlResponse = try await performRequest(body: requestBody)
        return parseScheduleDays(from: htmlResponse)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    func fetchScheduleByTeacher(date: Date = Date()) async throws -> [ScheduleDay] {
        let dateString = DateFormatter.apiDateFormatter.string(from: date)
        let requestBody = "PrepID=no&Time=\(dateString)"
        
        let htmlResponse = try await performRequest(body: requestBody)
        return parseScheduleDays(from: htmlResponse)
    }
    
    // MARK: - –ü—Ä–∏–≤–∞—Ç–Ω—ã–µ –º–µ—Ç–æ–¥—ã
    
    /// –°–æ–∑–¥–∞–µ—Ç –±–∞–∑–æ–≤—ã–π URL –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤
    private func createBaseURL() -> URL? {
        var components = URLComponents(string: baseURL)
        components?.queryItems = [
            URLQueryItem(name: "Itemid", value: itemId),
            URLQueryItem(name: "option", value: option),
            URLQueryItem(name: "view", value: view)
        ]
        return components?.url
    }
    
    /// –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP POST –∑–∞–ø—Ä–æ—Å –∫ API
    private func performRequest(body: String) async throws -> String {
        guard let url = createBaseURL() else {
            throw APIError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/x-www-form-urlencoded; charset=UTF-8", forHTTPHeaderField: "Content-Type")
        request.setValue("XMLHttpRequest", forHTTPHeaderField: "X-Requested-With")
        request.httpBody = body.data(using: .utf8)
        request.timeoutInterval = 20
        
        do {
            let (data, response) = try await session.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse,
                  httpResponse.statusCode == 200 else {
                throw APIError.invalidResponse
            }
            
            guard let htmlString = String(data: data, encoding: .utf8) else {
                throw APIError.noData
            }
            
            return htmlString
        } catch {
            if let urlError = error as? URLError {
                switch urlError.code {
                case .timedOut, .cannotConnectToHost, .networkConnectionLost, .cannotFindHost, .dnsLookupFailed, .internationalRoamingOff:
                    // –ß–∞—Å—Ç–æ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º VPN/–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
                    throw APIError.vpnOrBlockedNetwork
                default:
                    break
                }
            }
            throw APIError.networkError(error)
        }
    }
    
    // MARK: - –ü–∞—Ä—Å–∏–Ω–≥ HTML
    
    /// –ü–∞—Ä—Å–∏—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏–∑ HTML –æ—Ç–≤–µ—Ç–∞
    private func parseGroups(from html: String, facultyId: String) -> [Group] {
        var groups: [Group] = []
        
        // –ò—â–µ–º –≤—Å–µ option —Ç–µ–≥–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏
        let optionPattern = #"<option value='(\d+)'>–≥—Ä\.\s*([^-]+)\s*-\s*([^<]+)</option>"#
        let regex = try? NSRegularExpression(pattern: optionPattern, options: [])
        let nsString = html as NSString
        let results = regex?.matches(in: html, options: [], range: NSRange(location: 0, length: nsString.length)) ?? []
        
        print("üîç Found \(results.count) regex matches for groups pattern")
        
        if results.isEmpty {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ option —Ç–µ–≥–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            let anyOptionPattern = #"<option[^>]*>(.*?)</option>"#
            let debugRegex = try? NSRegularExpression(pattern: anyOptionPattern, options: [])
            let debugResults = debugRegex?.matches(in: html, options: [], range: NSRange(location: 0, length: nsString.length)) ?? []
            print("üêõ Found \(debugResults.count) total option tags in response")
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ option —Ç–µ–≥–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            for (index, match) in debugResults.prefix(5).enumerated() {
                if match.numberOfRanges > 0 {
                    let matchRange = match.range(at: 0)
                    let matchText = nsString.substring(with: matchRange)
                    print("üêõ Option \(index + 1): \(matchText)")
                }
            }
        }
        
        for result in results {
            guard result.numberOfRanges == 4 else { continue }
            
            let groupIdRange = result.range(at: 1)
            let groupNameRange = result.range(at: 2)
            let fullNameRange = result.range(at: 3)
            
            guard groupIdRange.location != NSNotFound,
                  groupNameRange.location != NSNotFound,
                  fullNameRange.location != NSNotFound else { continue }
            
            let groupId = nsString.substring(with: groupIdRange)
            let groupName = nsString.substring(with: groupNameRange).trimmingCharacters(in: .whitespacesAndNewlines)
            let fullName = nsString.substring(with: fullNameRange).trimmingCharacters(in: .whitespacesAndNewlines)
            
            let group = Group(id: groupId, name: groupName, fullName: fullName, facultyId: facultyId)
            groups.append(group)
            print("‚úÖ Parsed group: \(groupName) (ID: \(groupId))")
        }
        
        return groups.sorted { $0.name < $1.name }
    }
    
    /// –ü–∞—Ä—Å–∏—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–∑ HTML –æ—Ç–≤–µ—Ç–∞
    private func parseSchedule(from html: String, groupId: String, startDate: Date, endDate: Date?) throws -> Schedule {
        let days = parseScheduleDays(from: html)
        
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ HTML (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        let groupName = extractGroupName(from: html) ?? "–ì—Ä—É–ø–ø–∞ \(groupId)"
        
        return Schedule(
            groupId: groupId,
            groupName: groupName,
            startDate: startDate,
            endDate: endDate,
            days: days
        )
    }
    
    /// –ü–∞—Ä—Å–∏—Ç –¥–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ HTML –æ—Ç–≤–µ—Ç–∞
    private func parseScheduleDays(from html: String) -> [ScheduleDay] {
        var days: [ScheduleDay] = []
        
        // –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "01.09.2025 –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (2-—è –Ω–µ–¥–µ–ª—è)")
        let dayHeaderPattern = #"<h3>(\d{2}\.\d{2}\.\d{4})\s+([–ê-–Ø][–∞-—è]+)\s+\((\d+)-—è –Ω–µ–¥–µ–ª—è\)</h3>"#
        let dayRegex = try? NSRegularExpression(pattern: dayHeaderPattern, options: [])
        
        // –ü–∞—Ä—Å–∏–º —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
        let tablePattern = #"<h3>.*?</h3><table.*?>(.*?)</table>"#
        let tableRegex = try? NSRegularExpression(pattern: tablePattern, options: [.dotMatchesLineSeparators])
        
        let nsString = html as NSString
        let dayMatches = dayRegex?.matches(in: html, options: [], range: NSRange(location: 0, length: nsString.length)) ?? []
        let tableMatches = tableRegex?.matches(in: html, options: [], range: NSRange(location: 0, length: nsString.length)) ?? []
        
        guard dayMatches.count == tableMatches.count else {
            return days
        }
        
        for (index, dayMatch) in dayMatches.enumerated() {
            guard dayMatch.numberOfRanges == 4,
                  index < tableMatches.count else { continue }
            
            let dateRange = dayMatch.range(at: 1)
            let weekdayRange = dayMatch.range(at: 2)
            let weekNumberRange = dayMatch.range(at: 3)
            let tableContentRange = tableMatches[index].range(at: 1)
            
            guard dateRange.location != NSNotFound,
                  weekdayRange.location != NSNotFound,
                  weekNumberRange.location != NSNotFound,
                  tableContentRange.location != NSNotFound else { continue }
            
            let dateString = nsString.substring(with: dateRange)
            let weekdayString = nsString.substring(with: weekdayRange)
            let weekNumberString = nsString.substring(with: weekNumberRange)
            let tableContent = nsString.substring(with: tableContentRange)
            
            guard let date = DateFormatter.apiDateFormatter.date(from: dateString),
                  let weekNumber = Int(weekNumberString) else { continue }
            
            let lessons = parseLessons(from: tableContent)
            let isEvenWeek = weekNumber % 2 == 0
            
            let scheduleDay = ScheduleDay(
                date: date,
                weekday: weekdayString,
                weekNumber: weekNumber,
                isEvenWeek: isEvenWeek,
                lessons: lessons
            )
            
            days.append(scheduleDay)
        }
        
        return days.sorted { $0.date < $1.date }
    }
    
    /// –ü–∞—Ä—Å–∏—Ç –∑–∞–Ω—è—Ç–∏—è –∏–∑ HTML —Ç–∞–±–ª–∏—Ü—ã
    private func parseLessons(from tableHtml: String) -> [Lesson] {
        var lessons: [Lesson] = []
        
        // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã
        let rowPattern = #"<tr[^>]*>(.*?)</tr>"#
        let rowRegex = try? NSRegularExpression(pattern: rowPattern, options: [.dotMatchesLineSeparators])
        let nsString = tableHtml as NSString
        let rowResults = rowRegex?.matches(in: tableHtml, options: [], range: NSRange(location: 0, length: nsString.length)) ?? []
        
        for rowResult in rowResults {
            let rowContent = nsString.substring(with: rowResult.range(at: 1))
            
            // –ü–∞—Ä—Å–∏–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —É—Ä–æ–∫–∞
            if let lesson = parseIndividualLesson(from: rowContent) {
                lessons.append(lesson)
            }
        }
        
        return lessons.sorted { $0.pairNumber < $1.pairNumber }
    }
    
    /// –ü–∞—Ä—Å–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —É—Ä–æ–∫ –∏–∑ HTML —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
    private func parseIndividualLesson(from rowContent: String) -> Lesson? {
        // –ü–∞—Ä—Å–∏–º –Ω–æ–º–µ—Ä –ø–∞—Ä—ã
        let pairNumberPattern = #"<b[^>]*>\s*(\d+)-—è –ø–∞—Ä–∞\s*</b>"#
        let pairNumberRegex = try? NSRegularExpression(pattern: pairNumberPattern)
        let pairNumberMatch = pairNumberRegex?.firstMatch(in: rowContent, range: NSRange(location: 0, length: rowContent.count))
        
        guard let pairMatch = pairNumberMatch,
              let pairRange = Range(pairMatch.range(at: 1), in: rowContent) else {
            return nil
        }
        
        let pairNumber = Int(String(rowContent[pairRange])) ?? 0
        
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        let timePattern = #"(\d{2}:\d{2}-\d{2}:\d{2})"#
        let timeRegex = try? NSRegularExpression(pattern: timePattern)
        let timeMatch = timeRegex?.firstMatch(in: rowContent, range: NSRange(location: 0, length: rowContent.count))
        
        guard let timeMatchResult = timeMatch,
              let timeRange = Range(timeMatchResult.range(at: 1), in: rowContent) else {
            return nil
        }
        
        let timeString = String(rowContent[timeRange])
        let timeComponents = timeString.split(separator: "-")
        guard timeComponents.count == 2 else { return nil }
        
        // –ü–∞—Ä—Å–∏–º –ø—Ä–µ–¥–º–µ—Ç –∏ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
        let subjectPattern = #"<div>\(([^)]+)\)\s*([^<]+)</div>"#
        let subjectRegex = try? NSRegularExpression(pattern: subjectPattern)
        let subjectMatch = subjectRegex?.firstMatch(in: rowContent, range: NSRange(location: 0, length: rowContent.count))
        
        var lessonType = LessonType.lecture
        var subject = ""
        
        if let subjectMatchResult = subjectMatch,
           let typeRange = Range(subjectMatchResult.range(at: 1), in: rowContent),
           let subjRange = Range(subjectMatchResult.range(at: 2), in: rowContent) {
            lessonType = LessonType(from: String(rowContent[typeRange]))
            subject = String(rowContent[subjRange]).trimmingCharacters(in: .whitespacesAndNewlines)
        }
        
        // –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (ZOOM, Discord, etc.)
        let additionalInfoPattern = #"<div>([^<]*(?:ZOOM|Discord|FreeConferenceCall|–∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞|–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä)[^<]*)</div>"#
        let additionalInfoRegex = try? NSRegularExpression(pattern: additionalInfoPattern, options: [.caseInsensitive])
        let additionalInfoMatch = additionalInfoRegex?.firstMatch(in: rowContent, range: NSRange(location: 0, length: rowContent.count))
        
        var onlineInfo: String? = nil
        if let additionalInfoMatchResult = additionalInfoMatch,
           let infoRange = Range(additionalInfoMatchResult.range(at: 1), in: rowContent) {
            let info = String(rowContent[infoRange])
                .trimmingCharacters(in: .whitespacesAndNewlines)
                .replacingOccurrences(of: "\n", with: " ")
            if !info.isEmpty {
                onlineInfo = info
            }
        }
        
        // –ü–∞—Ä—Å–∏–º –∞—É–¥–∏—Ç–æ—Ä–∏—é - –∏—â–µ–º –≤ td —Å wrap
        let auditoriumPattern = #"<td[^>]*wrap[^>]*>([^<]*)</td>"#
        let auditoriumRegex = try? NSRegularExpression(pattern: auditoriumPattern)
        let auditoriumMatch = auditoriumRegex?.firstMatch(in: rowContent, range: NSRange(location: 0, length: rowContent.count))
        
        var auditorium: String? = nil
        if let auditoriumMatchResult = auditoriumMatch,
           let audRange = Range(auditoriumMatchResult.range(at: 1), in: rowContent) {
            let aud = String(rowContent[audRange]).trimmingCharacters(in: .whitespacesAndNewlines)
            if !aud.isEmpty && aud != " " {
                auditorium = aud
            }
        }
        
        // –ü–∞—Ä—Å–∏–º –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
        let teacherPattern = #"<div>([^<]+?)(?:\s*<a[^>]*href='mailto:([^']+)'[^>]*>&#9993;</a>)?</div>"#
        let teacherRegex = try? NSRegularExpression(pattern: teacherPattern)
        
        var teacher: Teacher? = nil
        let teacherMatches = teacherRegex?.matches(in: rowContent, options: [], range: NSRange(location: 0, length: rowContent.count)) ?? []
        
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á - –æ–±—ã—á–Ω–æ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if let lastTeacherMatch = teacherMatches.last,
           let nameRange = Range(lastTeacherMatch.range(at: 1), in: rowContent) {
            let teacherName = String(rowContent[nameRange]).trimmingCharacters(in: .whitespacesAndNewlines)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ –∏ –Ω–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
            if !teacherName.isEmpty && 
               teacherName != " " && 
               !teacherName.contains("wrap") &&
               !teacherName.contains("–ë–û2") { // –∏—Å–∫–ª—é—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø
                
                var teacherEmail: String? = nil
                if lastTeacherMatch.numberOfRanges > 2,
                   let emailRange = Range(lastTeacherMatch.range(at: 2), in: rowContent) {
                    let email = String(rowContent[emailRange]).trimmingCharacters(in: .whitespacesAndNewlines)
                    if !email.isEmpty {
                        teacherEmail = email
                    }
                }
                
                teacher = Teacher(name: teacherName, email: teacherEmail)
            }
        }
        
        return Lesson(
            pairNumber: pairNumber,
            timeStart: String(timeComponents[0]),
            timeEnd: String(timeComponents[1]),
            type: lessonType,
            subject: subject,
            room: auditorium,
            teacher: teacher,
            groups: [],
            onlineLink: onlineInfo
        )
    }
    
    // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–∞–∫ fallback
    private func parseLessonsOriginal(from tableHtml: String) -> [Lesson] {
        var lessons: [Lesson] = []
        
        // –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Å –∑–∞–Ω—è—Ç–∏—è–º–∏
        let lessonPattern = #"<tr[^>]*>.*?<b[^>]*>\s*(\d+)-—è –ø–∞—Ä–∞\s*</b>.*?(\d{2}:\d{2}-\d{2}:\d{2}).*?<div>\(([^)]+)\)\s*([^<]+)</div>.*?<div>([^<]*)</div>.*?wrap>([^<]*)</td>.*?>([^<]*)</td>.*?<div>([^<]*?)(?:<a[^>]*href='mailto:([^']*)'[^>]*>&#9993;</a>)?</div>"#
        
        let regex = try? NSRegularExpression(pattern: lessonPattern, options: [.dotMatchesLineSeparators])
        let nsString = tableHtml as NSString
        let results = regex?.matches(in: tableHtml, options: [], range: NSRange(location: 0, length: nsString.length)) ?? []
        
        for result in results {
            guard result.numberOfRanges >= 9 else { continue }
            
            let lessonNumberRange = result.range(at: 1)
            let timeRange = result.range(at: 2)
            let lessonTypeRange = result.range(at: 3)
            let subjectRange = result.range(at: 4)
            let onlineInfoRange = result.range(at: 5)
            let auditoriumRange = result.range(at: 6)
            let groupsRange = result.range(at: 7)
            let teacherNameRange = result.range(at: 8)
            let teacherEmailRange = result.numberOfRanges > 9 ? result.range(at: 9) : NSRange(location: NSNotFound, length: 0)
            
            let lessonNumber = nsString.substring(with: lessonNumberRange)
            let timeString = nsString.substring(with: timeRange)
            let lessonTypeString = nsString.substring(with: lessonTypeRange)
            let subject = nsString.substring(with: subjectRange).trimmingCharacters(in: .whitespacesAndNewlines)
            let onlineInfo = nsString.substring(with: onlineInfoRange).trimmingCharacters(in: .whitespacesAndNewlines)
            let auditorium = nsString.substring(with: auditoriumRange).trimmingCharacters(in: .whitespacesAndNewlines)
            let groups = nsString.substring(with: groupsRange).trimmingCharacters(in: .whitespacesAndNewlines)
            let teacherName = nsString.substring(with: teacherNameRange).trimmingCharacters(in: .whitespacesAndNewlines)
            
            let teacherEmail = teacherEmailRange.location != NSNotFound ? 
                nsString.substring(with: teacherEmailRange).trimmingCharacters(in: .whitespacesAndNewlines) : nil
            
            // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
            let timeComponents = timeString.split(separator: "-")
            guard timeComponents.count == 2 else { continue }
            
            let startTime = String(timeComponents[0])
            let endTime = String(timeComponents[1])
            
            let lessonType = LessonType(from: lessonTypeString)
            let teacher = Teacher(name: teacherName, email: teacherEmail)
            
            let lesson = Lesson(
                pairNumber: Int(lessonNumber) ?? 0,
                timeStart: startTime,
                timeEnd: endTime,
                type: lessonType,
                subject: subject,
                room: auditorium.isEmpty ? nil : auditorium,
                teacher: teacherName.isEmpty ? nil : teacher,
                groups: groups.isEmpty ? [] : [groups],
                onlineLink: onlineInfo.isEmpty ? nil : onlineInfo
            )
            
            lessons.append(lesson)
        }
        
        return lessons.sorted { $0.pairNumber < $1.pairNumber }
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ HTML (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
    private func extractGroupName(from html: String) -> String? {
        // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ HTML
        let groupPattern = #"(?:–≥—Ä\.\s*|–≥—Ä—É–ø–ø–∞\s*)([–ê-–Ø0-9]+[–ê-–Ø]{3})"#
        let regex = try? NSRegularExpression(pattern: groupPattern, options: [.caseInsensitive])
        let nsString = html as NSString
        
        if let match = regex?.firstMatch(in: html, options: [], range: NSRange(location: 0, length: nsString.length)),
           match.numberOfRanges > 1 {
            let groupNameRange = match.range(at: 1)
            return nsString.substring(with: groupNameRange)
        }
        
        return nil
    }
}

// MARK: - DateFormatter Extension

extension DateFormatter {
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –∏–∑ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, "01.09.2025")
    static let apiDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy"
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.timeZone = TimeZone(identifier: "Asia/Vladivostok")
        return formatter
    }()
    
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    static let displayDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd MMM yyyy, EEEE"
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.timeZone = TimeZone(identifier: "Asia/Vladivostok")
        return formatter
    }()
    
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    static let timeFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm"
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.timeZone = TimeZone(identifier: "Asia/Vladivostok")
        return formatter
    }()
}

// MARK: - –ù–æ–≤–æ—Å—Ç–∏ –î–í–ì–£–ü–°

/// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π –î–í–ì–£–ü–°
@MainActor
class DVGUPSNewsAPIClient: ObservableObject {
    private let baseURL = "https://www.dvgups.ru/news.php"
    private let session: URLSession
    private let itemsPerPage = 10
    
    init(session: URLSession = .shared) {
        self.session = session
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    func fetchNews(offset: Int = 0) async throws -> NewsResponse {
        guard let url = URL(string: "\(baseURL)?st=\(offset)") else {
            throw NewsError.invalidURL
        }
        
        print("üåê NewsAPIClient.fetchNews() - Offset: \(offset)")
        
        var request = URLRequest(url: url)
        request.setValue("keep-alive", forHTTPHeaderField: "Connection")
        request.setValue("www.dvgups.ru", forHTTPHeaderField: "Host")
        request.timeoutInterval = 30
        
        do {
            let (data, response) = try await session.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse,
                  httpResponse.statusCode == 200 else {
                throw NewsError.networkError(URLError(.badServerResponse))
            }
            
            guard let xmlString = String(data: data, encoding: .utf8) else {
                throw NewsError.noData
            }
            
            let newsItems = try parseNewsXML(xmlString)
            // –ë–æ–ª–µ–µ —É–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            let hasMorePages = newsItems.count == itemsPerPage && !newsItems.isEmpty
            let nextOffset = offset + newsItems.count
            
            print("‚úÖ Loaded \(newsItems.count) news items, hasMore: \(hasMorePages)")
            
            return NewsResponse(items: newsItems, hasMorePages: hasMorePages, nextOffset: nextOffset)
            
        } catch {
            print("‚ùå Error loading news: \(error)")
            throw NewsError.networkError(error)
        }
    }
    
    /// –ü–∞—Ä—Å–∏—Ç XML –æ—Ç–≤–µ—Ç —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ RSS —Ñ–æ—Ä–º–∞—Ç–µ
    private func parseNewsXML(_ xml: String) throws -> [NewsItem] {
        var newsItems: [NewsItem] = []
        
        // –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ XML
        let itemPattern = #"<item>(.*?)</item>"#
        let idPattern = #"<id>(\d+)</id>"#
        let titlePattern = #"<title>(.*?)</title>"#
        let descriptionPattern = #"<description>(.*?)</description>"#
        let fullPattern = #"<full>(.*?)</full>"#
        let imagePattern = #"<imageur><img>(.*?)</img></imageur>"#
        let datePattern = #"<date>(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2})</date>"#
        let hitsPattern = #"<hits>(\d+)</hits>"#
        
        let itemRegex = try NSRegularExpression(pattern: itemPattern, options: [.dotMatchesLineSeparators])
        let nsString = xml as NSString
        let matches = itemRegex.matches(in: xml, options: [], range: NSRange(location: 0, length: nsString.length))
        
        for match in matches {
            guard match.numberOfRanges > 1 else { continue }
            
            let itemContent = nsString.substring(with: match.range(at: 1))
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–∞–∂–¥–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
            let id = extractValue(from: itemContent, pattern: idPattern) ?? UUID().uuidString
            let title = extractValue(from: itemContent, pattern: titlePattern)?.decodingHTMLEntities() ?? ""
            let description = extractValue(from: itemContent, pattern: descriptionPattern)?.decodingHTMLEntities() ?? ""
            let fullText = extractValue(from: itemContent, pattern: fullPattern)?.decodingHTMLEntities() ?? ""
            let imageURL = extractValue(from: itemContent, pattern: imagePattern)
            let dateString = extractValue(from: itemContent, pattern: datePattern) ?? ""
            let hitsString = extractValue(from: itemContent, pattern: hitsPattern) ?? "0"
            
            // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
            let date = NewsItem.newsDateFormatter.date(from: dateString) ?? Date()
            let hits = Int(hitsString) ?? 0
            
            let newsItem = NewsItem(
                id: id,
                title: title,
                description: description,
                fullText: fullText,
                imageURL: imageURL,
                date: date,
                hits: hits
            )
            
            newsItems.append(newsItem)
        }
        
        return newsItems
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–º—É –≤—ã—Ä–∞–∂–µ–Ω–∏—é
    private func extractValue(from text: String, pattern: String) -> String? {
        guard let regex = try? NSRegularExpression(pattern: pattern, options: [.dotMatchesLineSeparators]) else {
            return nil
        }
        
        let nsString = text as NSString
        let results = regex.matches(in: text, options: [], range: NSRange(location: 0, length: nsString.length))
        
        guard let match = results.first, match.numberOfRanges > 1 else {
            return nil
        }
        
        return nsString.substring(with: match.range(at: 1))
    }
}

// MARK: - HTML Entities Extension

extension String {
    /// –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç HTML entities
    func decodingHTMLEntities() -> String {
        return self
            .replacingOccurrences(of: "&amp;", with: "&")
            .replacingOccurrences(of: "&lt;", with: "<")
            .replacingOccurrences(of: "&gt;", with: ">")
            .replacingOccurrences(of: "&quot;", with: "\"")
            .replacingOccurrences(of: "&#39;", with: "'")
            .replacingOccurrences(of: "&nbsp;", with: " ")
    }
}