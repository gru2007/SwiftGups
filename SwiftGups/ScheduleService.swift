import Foundation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
@MainActor
class ScheduleService: ObservableObject {
    
    @Published var faculties: [Faculty] = Faculty.allFaculties
    @Published var selectedFaculty: Faculty?
    @Published var groups: [Group] = []
    @Published var selectedGroup: Group?
    @Published var currentSchedule: Schedule?
    @Published var selectedDate: Date = Date()
    @Published var isLoading = false
    @Published var errorMessage: String?
    
    private let apiClient: DVGUPSAPIClient
    
    init() {
        self.apiClient = DVGUPSAPIClient()
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ò–Ω—Å—Ç–∏—Ç—É—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
        self.selectedFaculty = faculties.first { $0.id == "2" }
    }
    
    init(apiClient: DVGUPSAPIClient) {
        self.apiClient = apiClient
        // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±–∏—Ä–∞–µ–º –ò–Ω—Å—Ç–∏—Ç—É—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π
        self.selectedFaculty = faculties.first { $0.id == "2" }
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    func loadGroups() async {
        guard let faculty = selectedFaculty else {
            errorMessage = "–§–∞–∫—É–ª—å—Ç–µ—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω"
            return
        }
        
        print("üîÑ ScheduleService.loadGroups() started for faculty: \(faculty.id) (\(faculty.name))")
        isLoading = true
        errorMessage = nil
        
        do {
            let fetchedGroups = try await apiClient.fetchGroups(for: faculty.id, date: selectedDate)
            print("‚úÖ Successfully fetched \(fetchedGroups.count) groups for faculty \(faculty.id)")
            groups = fetchedGroups
            selectedGroup = nil // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            
            if fetchedGroups.isEmpty {
                print("‚ö†Ô∏è No groups found for faculty \(faculty.id)")
                errorMessage = "–ì—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            }
        } catch {
            print("‚ùå Error fetching groups: \(error.localizedDescription)")
            if let apiError = error as? APIError {
                print("‚ùå API Error details: \(apiError)")
                if case .vpnOrBlockedNetwork = apiError {
                    errorMessage = apiError.localizedDescription
                } else {
                    errorMessage = apiError.localizedDescription
                }
            } else {
                errorMessage = error.localizedDescription
            }
            groups = []
        }
        
        isLoading = false
        print("üèÅ ScheduleService.loadGroups() finished. Groups count: \(groups.count)")
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    func loadGroups(for facultyId: String, date: Date? = nil) async {
        print("üîÑ ScheduleService.loadGroups(for: \(facultyId)) started")
        isLoading = true
        errorMessage = nil
        
        do {
            let targetDate = date ?? selectedDate
            let fetchedGroups = try await apiClient.fetchGroups(for: facultyId, date: targetDate)
            print("‚úÖ Successfully fetched \(fetchedGroups.count) groups for faculty \(facultyId)")
            groups = fetchedGroups
            selectedGroup = nil
            
            if fetchedGroups.isEmpty {
                print("‚ö†Ô∏è No groups found for faculty \(facultyId)")
                errorMessage = "–ì—Ä—É–ø–ø—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
            }
        } catch {
            print("‚ùå Error fetching groups for faculty \(facultyId): \(error.localizedDescription)")
            errorMessage = error.localizedDescription
            groups = []
        }
        
        isLoading = false
        print("üèÅ ScheduleService.loadGroups(for: \(facultyId)) finished. Groups count: \(groups.count)")
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    func loadSchedule() async {
        guard let group = selectedGroup else {
            errorMessage = "–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
            return
        }
        
        isLoading = true
        errorMessage = nil
        
        do {
            let schedule = try await apiClient.fetchSchedule(
                for: group.id, 
                startDate: selectedDate,
                endDate: selectedDate.addingTimeInterval(7 * 24 * 60 * 60) // –ù–µ–¥–µ–ª—è
            )
            currentSchedule = schedule
        } catch {
            errorMessage = error.localizedDescription
            currentSchedule = nil
        }
        
        isLoading = false
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã –∏ –¥–∞—Ç—ã
    func loadSchedule(for groupId: String, startDate: Date, endDate: Date? = nil) async {
        isLoading = true
        errorMessage = nil
        
        do {
            let schedule = try await apiClient.fetchSchedule(
                for: groupId, 
                startDate: startDate, 
                endDate: endDate
            )
            currentSchedule = schedule
        } catch {
            errorMessage = error.localizedDescription
            currentSchedule = nil
        }
        
        isLoading = false
    }
    
    /// –í—ã–±–∏—Ä–∞–µ—Ç —Ñ–∞–∫—É–ª—å—Ç–µ—Ç –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ–≥–æ –≥—Ä—É–ø–ø—ã
    func selectFaculty(_ faculty: Faculty) {
        print("üéØ ScheduleService.selectFaculty() called for: \(faculty.name) (id: \(faculty.id))")
        selectedFaculty = faculty
        selectedGroup = nil
        currentSchedule = nil
        groups = []
        
        Task {
            await loadGroups()
        }
    }
    
    /// –í—ã–±–∏—Ä–∞–µ—Ç –≥—Ä—É–ø–ø—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –µ—ë –Ω–µ–¥–µ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    func selectGroup(_ group: Group) {
        selectedGroup = group
        currentSchedule = nil
        
        Task {
            await loadWeekSchedule() // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –≤—Å—é –Ω–µ–¥–µ–ª—é
        }
    }
    
    /// –ò–∑–º–µ–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ
    func selectDate(_ date: Date) {
        selectedDate = date
        
        Task { [selectedFaculty, selectedGroup] in
            // –ì—Ä—É–ø–ø—ã –º–µ–Ω—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–µ–¥–µ–ª–∏ ‚Äî —Å–æ—Å—Ç–∞–≤ –≥—Ä—É–ø–ø –Ω–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∞—Ç—ã
            // –ü–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞
            if selectedGroup != nil {
                await loadWeekSchedule()
            }
        }
    }
    
    /// –û—á–∏—â–∞–µ—Ç –≤—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    func clearSelection() {
        selectedFaculty = nil
        selectedGroup = nil
        currentSchedule = nil
        groups = []
        errorMessage = nil
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
    func filteredGroups(searchText: String) -> [Group] {
        guard !searchText.isEmpty else { return groups }
        
        return groups.filter { group in
            group.name.localizedCaseInsensitiveContains(searchText) ||
            group.fullName.localizedCaseInsensitiveContains(searchText)
        }
    }
    
    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã
    func loadWeekSchedule() async {
        guard let group = selectedGroup else {
            errorMessage = "–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞"
            return
        }
        
        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–∞—á–∞–ª–æ –Ω–µ–¥–µ–ª–∏ (–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        let calendar = Calendar.current
        let weekday = calendar.component(.weekday, from: selectedDate)
        let daysFromMonday = (weekday + 5) % 7 // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –≥–¥–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
        
        guard let startOfWeek = calendar.date(byAdding: .day, value: -daysFromMonday, to: selectedDate) else {
            errorMessage = "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏"
            return
        }
        
        guard let endOfWeek = calendar.date(byAdding: .day, value: 6, to: startOfWeek) else {
            errorMessage = "–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏"
            return
        }
        
        isLoading = true
        errorMessage = nil
        print("üìÜ Loading week schedule for group: \(group.id) from \(DateFormatter.apiDateFormatter.string(from: startOfWeek)) to \(DateFormatter.apiDateFormatter.string(from: endOfWeek))")
        
        do {
            let schedule = try await apiClient.fetchSchedule(
                for: group.id,
                startDate: startOfWeek,
                endDate: endOfWeek
            )
            currentSchedule = schedule
            print("‚úÖ Week schedule loaded: days=\(schedule.days.count) group=\(schedule.groupName)")
        } catch {
            errorMessage = error.localizedDescription
            currentSchedule = nil
            print("‚ùå Failed to load week schedule: \(error.localizedDescription)")
        }
        
        isLoading = false
    }
    
    /// –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –Ω–µ–¥–µ–ª–µ
    func previousWeek() {
        guard let newDate = Calendar.current.date(byAdding: .weekOfYear, value: -1, to: selectedDate) else {
            return
        }
        selectDate(newDate)
    }
    
    /// –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ
    func nextWeek() {
        guard let newDate = Calendar.current.date(byAdding: .weekOfYear, value: 1, to: selectedDate) else {
            return
        }
        selectDate(newDate)
    }
    
    /// –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–µ
    func goToCurrentWeek() {
        selectDate(Date())
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –¥–∏–∞–ø–∞–∑–æ–Ω–æ–º —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    func currentWeekRange() -> String {
        let calendar = Calendar.current
        let weekday = calendar.component(.weekday, from: selectedDate)
        let daysFromMonday = (weekday + 5) % 7 // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –≥–¥–µ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ = 0
        
        guard let startOfWeek = calendar.date(byAdding: .day, value: -daysFromMonday, to: selectedDate),
              let endOfWeek = calendar.date(byAdding: .day, value: 6, to: startOfWeek) else {
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è"
        }
        
        let formatter = DateFormatter()
        formatter.dateFormat = "dd MMM"
        formatter.locale = Locale(identifier: "ru_RU")
        
        let startString = formatter.string(from: startOfWeek)
        let endString = formatter.string(from: endOfWeek)
        
        return "\(startString) - \(endString)"
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ - –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≥—Ä—É–ø–ø—ã –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    func refresh() async {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≥—Ä—É–ø–ø–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –µ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if selectedGroup != nil {
            await loadWeekSchedule()
        } else if selectedFaculty != nil {
            // –ò–Ω–∞—á–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≥—Ä—É–ø–ø—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
            await loadGroups()
        }
    }
}