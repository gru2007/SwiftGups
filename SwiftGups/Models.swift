import Foundation
import SwiftData
import CloudKit

// MARK: - –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –≤—É–∑–∞

/*
 –í–ê–ñ–ù–û: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å CloudKit
 
 –ú–æ–¥–µ–ª–∏ User –∏ Homework –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Å iCloud:
 - –í—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã –∏–º–µ—é—Ç –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ CloudKit)
 - –£–¥–∞–ª–µ–Ω—ã unique constraints - CloudKit –∏—Ö –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç
 - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è .private CloudKit –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 - CloudKit –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –º–µ–∂–¥—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
 
 –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ iCloud –∞–∫–∫–∞—É–Ω—Ç–∞.
 –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ iCloud –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É—é—Ç—Å—è –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏.
 */

/// –§–∞–∫—É–ª—å—Ç–µ—Ç/–ò–Ω—Å—Ç–∏—Ç—É—Ç
struct Faculty: Codable, Identifiable, Hashable {
    let id: String
    let name: String
    
    init(id: String, name: String) {
        self.id = id
        self.name = name
    }
    
    /// –í—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –î–í–ì–£–ü–°
    static let allFaculties = [
        Faculty(id: "8", name: "–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ-–Ω–∞—É—á–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç"),
        Faculty(id: "5", name: "–ò–Ω—Å—Ç–∏—Ç—É—Ç –≤–æ–∑–¥—É—à–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –º—É–ª—å—Ç–∏—Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π"),
        Faculty(id: "11", name: "–ò–Ω—Å—Ç–∏—Ç—É—Ç –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º –æ–±—É—á–µ–Ω–∏—è"),
        Faculty(id: "9", name: "–ò–Ω—Å—Ç–∏—Ç—É—Ç –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞"),
        Faculty(id: "4", name: "–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"),
        Faculty(id: "1", name: "–ò–Ω—Å—Ç–∏—Ç—É—Ç —Ç—è–≥–∏ –∏ –ø–æ–¥–≤–∏–∂–Ω–æ–≥–æ —Å–æ—Å—Ç–∞–≤–∞"),
        Faculty(id: "2", name: "–ò–Ω—Å—Ç–∏—Ç—É—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –∏ —Ç–µ–ª–µ–∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–π"),
        Faculty(id: "3", name: "–ò–Ω—Å—Ç–∏—Ç—É—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏"),
        Faculty(id: "10", name: "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–µ —É—á–∏–ª–∏—â–µ"),
        Faculty(id: "34", name: "–†–æ—Å—Å–∏–π—Å–∫–æ-–∫–∏—Ç–∞–π—Å–∫–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç"),
        Faculty(id: "7", name: "–°–æ—Ü–∏–∞–ª—å–Ω–æ-–≥—É–º–∞–Ω–∏—Ç–∞—Ä–Ω—ã–π –∏–Ω—Å—Ç–∏—Ç—É—Ç"),
        Faculty(id: "19", name: "–•–∞–±–∞—Ä–æ–≤—Å–∫–∏–π —Ç–µ—Ö–Ω–∏–∫—É–º –∂–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω–æ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"),
        Faculty(id: "6", name: "–≠–ª–µ–∫—Ç—Ä–æ—ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç"),
        Faculty(id: "-1", name: "–ê–º–ò–ñ–¢"),
        Faculty(id: "-2", name: "–ë–∞–º–ò–ñ–¢"),
        Faculty(id: "-3", name: "–ü—Ä–∏–º–ò–ñ–¢"),
        Faculty(id: "-4", name: "–°–∞—Ö–ò–ñ–¢")
    ]
}

/// –ì—Ä—É–ø–ø–∞ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
struct Group: Codable, Identifiable, Hashable {
    let id: String // GroupID –∏–∑ API
    let name: String // –ù–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë–û241–ò–°–¢")
    let fullName: String // –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
    let facultyId: String // ID —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–∞
    
    init(id: String, name: String, fullName: String, facultyId: String = "") {
        self.id = id
        self.name = name
        self.fullName = fullName
        self.facultyId = facultyId
    }
}

/// –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è
enum LessonType: String, Codable, CaseIterable {
    case lecture = "–õ–µ–∫—Ü–∏–∏"
    case practice = "–ü—Ä–∞–∫—Ç–∏–∫–∞"
    case laboratory = "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã"
    case unknown = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    init(from rawValue: String) {
        switch rawValue.lowercased() {
        case "–ª–µ–∫—Ü–∏–∏":
            self = .lecture
        case "–ø—Ä–∞–∫—Ç–∏–∫–∞":
            self = .practice
        case "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—ã–µ —Ä–∞–±–æ—Ç—ã":
            self = .laboratory
        default:
            self = .unknown
        }
    }
}

/// –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
struct Teacher: Codable {
    let name: String
    let email: String?
    
    init(name: String, email: String? = nil) {
        self.name = name
        self.email = email
    }
}

/// –ü–∞—Ä–∞ (–∑–∞–Ω—è—Ç–∏–µ)
struct Lesson: Codable, Identifiable {
    let id = UUID()
    let pairNumber: Int // –ù–æ–º–µ—Ä –ø–∞—Ä—ã (1-6)
    let timeStart: String // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "09:50")
    let timeEnd: String // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, "11:20")
    let type: LessonType // –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è
    let subject: String // –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
    let room: String? // –ê—É–¥–∏—Ç–æ—Ä–∏—è
    let teacher: Teacher? // –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    let groups: [String] // –ì—Ä—É–ø–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏
    let onlineLink: String? // –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–Ω–ª–∞–π–Ω-–∑–∞–Ω—è—Ç–∏–µ
    let isEvenWeek: Bool? // –ß–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω–æ)
    
    init(pairNumber: Int, timeStart: String, timeEnd: String, type: LessonType, 
         subject: String, room: String? = nil, teacher: Teacher? = nil, 
         groups: [String] = [], onlineLink: String? = nil, isEvenWeek: Bool? = nil) {
        self.pairNumber = pairNumber
        self.timeStart = timeStart
        self.timeEnd = timeEnd
        self.type = type
        self.subject = subject
        self.room = room
        self.teacher = teacher
        self.groups = groups
        self.onlineLink = onlineLink
        self.isEvenWeek = isEvenWeek
    }
    
    /// –§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±–º–µ–Ω–∞
    var shareText: String {
        var text = "üìÖ –ü–∞—Ä–∞ ‚Ññ\(pairNumber)\n"
        text += "üï∞ –í—Ä–µ–º—è: \(timeStart) - \(timeEnd)\n"
        text += "üìö \(type.rawValue): \(subject)\n"
        
        if let room = room, !room.isEmpty {
            text += "üìç –ê—É–¥–∏—Ç–æ—Ä–∏—è: \(room)\n"
        }
        
        if let teacher = teacher, !teacher.name.isEmpty {
            text += "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: \(teacher.name)\n"
            if let email = teacher.email, !email.isEmpty {
                text += "‚úâÔ∏è Email: \(email)\n"
            }
        }
        
        if !groups.isEmpty {
            text += "üë• –ì—Ä—É–ø–ø—ã: \(groups.joined(separator: ", "))\n"
        }
        
        if let onlineLink = onlineLink, !onlineLink.isEmpty {
            text += "üíª –î–∏—Å—Ç–∞–Ω—Ü–∏–æ–Ω–Ω–æ: \(onlineLink)\n"
        }
        
        text += "\nüéì –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ SwiftGups"
        
        return text
    }
}

/// –î–µ–Ω—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
struct ScheduleDay: Codable, Identifiable {
    let id = UUID()
    let date: Date
    let weekday: String // –ù–∞–ø—Ä–∏–º–µ—Ä, "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫"
    let weekNumber: Int? // –ù–æ–º–µ—Ä –Ω–µ–¥–µ–ª–∏ (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ —É–∫–∞–∑–∞–Ω)
    let isEvenWeek: Bool? // –ß–µ—Ç–Ω–∞—è/–Ω–µ—á–µ—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è
    let lessons: [Lesson]
    
    init(date: Date, weekday: String, weekNumber: Int? = nil, 
         isEvenWeek: Bool? = nil, lessons: [Lesson] = []) {
        self.date = date
        self.weekday = weekday
        self.weekNumber = weekNumber
        self.isEvenWeek = isEvenWeek
        self.lessons = lessons
    }
}

/// –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã
struct Schedule: Codable, Identifiable {
    let id = UUID()
    let groupId: String
    let groupName: String
    let facultyId: String
    let startDate: Date // –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
    let endDate: Date // –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞ –ø–µ—Ä–∏–æ–¥–∞
    let days: [ScheduleDay]
    let lastUpdated: Date
    
    init(groupId: String, groupName: String, facultyId: String = "",
         startDate: Date, endDate: Date? = nil, 
         days: [ScheduleDay] = [], lastUpdated: Date = Date()) {
        self.groupId = groupId
        self.groupName = groupName
        self.facultyId = facultyId
        self.startDate = startDate
        self.endDate = endDate ?? startDate.addingTimeInterval(7 * 24 * 60 * 60) // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ–¥–µ–ª—è
        self.days = days
        self.lastUpdated = lastUpdated
    }
}



// MARK: - –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è

extension Date {
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç –∏–∑ API (–Ω–∞–ø—Ä–∏–º–µ—Ä, "01.09.2025")
    static let apiDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd.MM.yyyy"
        formatter.locale = Locale(identifier: "ru_RU")
        return formatter
    }()
    
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    static let displayDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd MMM yyyy, EEEE"
        formatter.locale = Locale(identifier: "ru_RU")
        return formatter
    }()
}

// MARK: - –ú–æ–¥–µ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

/// –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ iCloud)
@Model
class User {
    var id: UUID = UUID()
    var name: String = ""
    var facultyId: String = ""
    var facultyName: String = ""
    var groupId: String = ""
    var groupName: String = ""
    var createdAt: Date = Date()
    var isFirstTime: Bool = true
    
    init(name: String, facultyId: String, facultyName: String, groupId: String, groupName: String) {
        self.id = UUID()
        self.name = name
        self.facultyId = facultyId
        self.facultyName = facultyName
        self.groupId = groupId
        self.groupName = groupName
        self.createdAt = Date()
        self.isFirstTime = true
    }
    
    func updateGroup(groupId: String, groupName: String) {
        self.groupId = groupId
        self.groupName = groupName
    }
    
    func updateFaculty(facultyId: String, facultyName: String) {
        self.facultyId = facultyId
        self.facultyName = facultyName
    }
}

/// –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ (—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç—Å—è —á–µ—Ä–µ–∑ iCloud)
@Model
class Homework {
    var id: UUID = UUID()
    var title: String = ""
    var subject: String = ""
    var desc: String = ""
    var dueDate: Date = Date()
    var isCompleted: Bool = false
    var createdAt: Date = Date()
    var priority: HomeworkPriority = HomeworkPriority.medium
    var attachments: [String] = [] // –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –∏–ª–∏ —Å—Å—ã–ª–∫–∏
    
    init(title: String, subject: String, description: String, dueDate: Date, priority: HomeworkPriority = .medium) {
        self.id = UUID()
        self.title = title
        self.subject = subject
        self.desc = description
        self.dueDate = dueDate
        self.isCompleted = false
        self.createdAt = Date()
        self.priority = priority
        self.attachments = []
    }
    
    func toggle() {
        isCompleted.toggle()
    }
    
    func addAttachment(_ attachment: String) {
        attachments.append(attachment)
    }
    
    func removeAttachment(_ attachment: String) {
        attachments.removeAll { $0 == attachment }
    }
    
    var imageAttachments: [String] {
        return attachments.filter { attachment in
            let lowercased = attachment.lowercased()
            return lowercased.hasSuffix(".jpg") || 
                   lowercased.hasSuffix(".jpeg") || 
                   lowercased.hasSuffix(".png") || 
                   lowercased.hasSuffix(".heic") ||
                   lowercased.hasSuffix(".heif")
        }
    }
}

/// –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
enum HomeworkPriority: String, Codable, CaseIterable {
    case low = "–ù–∏–∑–∫–∏–π"
    case medium = "–°—Ä–µ–¥–Ω–∏–π"
    case high = "–í—ã—Å–æ–∫–∏–π"
    case urgent = "–°—Ä–æ—á–Ω—ã–π"
    
    var color: String {
        switch self {
        case .low: return "gray"
        case .medium: return "blue"
        case .high: return "orange"
        case .urgent: return "red"
        }
    }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–∞—Ä
extension Collection where Element == Lesson {
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä –ø–æ —Ç–∏–ø–∞–º
    var lessonTypeStats: [LessonType: Int] {
        var stats: [LessonType: Int] = [:]
        for lesson in self {
            stats[lesson.type, default: 0] += 1
        }
        return stats
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä—ã —Å –æ–Ω–ª–∞–π–Ω-—Å—Å—ã–ª–∫–∞–º–∏
    var onlineLessons: [Element] {
        return self.filter { $0.onlineLink != nil && !$0.onlineLink!.isEmpty }
    }
}

/// –í—Ä–µ–º—è –ø–∞—Ä (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤)
struct LessonTime: Identifiable, Codable {
    let id = UUID()
    let number: Int
    let startTime: String
    let endTime: String
    
    var timeRange: String {
        return "\(startTime) - \(endTime)"
    }
    
    /// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –î–í–ì–£–ü–°
    static let schedule = [
        LessonTime(number: 1, startTime: "8:05", endTime: "9:35"),
        LessonTime(number: 2, startTime: "9:50", endTime: "11:20"),
        LessonTime(number: 3, startTime: "11:35", endTime: "13:05"),
        LessonTime(number: 4, startTime: "13:35", endTime: "15:05"),
        LessonTime(number: 5, startTime: "15:15", endTime: "16:45"),
        LessonTime(number: 6, startTime: "16:55", endTime: "18:25")
    ]
    
    static func timeForPair(_ number: Int) -> LessonTime? {
        return schedule.first { $0.number == number }
    }
}

extension String {
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç email –∏–∑ HTML —Å—Ç—Ä–æ–∫–∏
    func extractEmail() -> String? {
        let emailRegex = try? NSRegularExpression(pattern: "mailto:([\\w\\.-]+@[\\w\\.-]+)", options: [])
        let nsString = self as NSString
        let results = emailRegex?.matches(in: self, options: [], range: NSRange(location: 0, length: nsString.length))
        
        if let match = results?.first, match.numberOfRanges > 1 {
            let emailRange = match.range(at: 1)
            return nsString.substring(with: emailRange)
        }
        return nil
    }
    
    /// –û—á–∏—â–∞–µ—Ç HTML —Ç–µ–≥–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
    func stripHTMLTags() -> String {
        return self.replacingOccurrences(of: "<[^>]+>", with: "", options: .regularExpression, range: nil)
            .trimmingCharacters(in: .whitespacesAndNewlines)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ URL
    var containsURL: Bool {
        let detector = try? NSDataDetector(types: NSTextCheckingResult.CheckingType.link.rawValue)
        if let detector = detector {
            let range = NSRange(location: 0, length: self.count)
            return detector.firstMatch(in: self, options: [], range: range) != nil
        }
        return false
    }
    
    /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç URLs –∏–∑ —Å—Ç—Ä–æ–∫–∏
    var extractedURLs: [URL] {
        let detector = try? NSDataDetector(types: NSTextCheckingResult.CheckingType.link.rawValue)
        guard let detector = detector else { return [] }
        
        let range = NSRange(location: 0, length: self.count)
        let matches = detector.matches(in: self, options: [], range: range)
        
        return matches.compactMap { match in
            guard let range = Range(match.range, in: self) else { return nil }
            return URL(string: String(self[range]))
        }
    }
    
    /// –°–æ–∫—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã
    func truncated(to length: Int) -> String {
        guard self.count > length else { return self }
        return String(self.prefix(length)) + "..."
    }
}

// MARK: - –ù–æ–≤–æ—Å—Ç–∏

/// –≠–ª–µ–º–µ–Ω—Ç –Ω–æ–≤–æ—Å—Ç–µ–π
struct NewsItem: Codable, Identifiable, Hashable {
    let id: String
    let title: String
    let description: String
    let fullText: String
    let imageURL: String?
    let date: Date
    let hits: Int
    
    init(id: String, title: String, description: String, fullText: String, imageURL: String?, date: Date, hits: Int = 0) {
        self.id = id
        self.title = title
        self.description = description
        self.fullText = fullText
        self.imageURL = imageURL?.isEmpty == false ? imageURL : nil
        self.date = date
        self.hits = hits
    }
    
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏–∑ API –Ω–æ–≤–æ—Å—Ç–µ–π
    static let newsDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "yyyy-MM-dd HH:mm:ss"
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.timeZone = TimeZone(identifier: "Asia/Vladivostok")
        return formatter
    }()
    
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é  
    static let displayDateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "dd MMM yyyy, HH:mm"
        formatter.locale = Locale(identifier: "ru_RU")
        formatter.timeZone = TimeZone(identifier: "Asia/Vladivostok")
        return formatter
    }()
}

/// –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
struct NewsResponse: Codable {
    let items: [NewsItem]
    let hasMorePages: Bool
    let nextOffset: Int
    
    init(items: [NewsItem], hasMorePages: Bool = false, nextOffset: Int = 0) {
        self.items = items
        self.hasMorePages = hasMorePages
        self.nextOffset = nextOffset
    }
}

/// –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
extension Schedule {
    /// –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –ø–∞—Ä
    var overallStats: [LessonType: Int] {
        let allLessons = days.flatMap { $0.lessons }
        return allLessons.lessonTypeStats
    }
    
    /// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä
    var totalLessonsCount: Int {
        return days.reduce(0) { $0 + $1.lessons.count }
    }
    
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–Ω–ª–∞–π–Ω –ø–∞—Ä
    var onlineLessonsCount: Int {
        let allLessons = days.flatMap { $0.lessons }
        return allLessons.onlineLessons.count
    }
}

/// –û—à–∏–±–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
enum NewsError: Error, LocalizedError {
    case invalidURL
    case noData
    case parseError(String)
    case networkError(Error)
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "–ù–µ–≤–µ—Ä–Ω—ã–π URL –Ω–æ–≤–æ—Å—Ç–µ–π"
        case .noData:
            return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –æ—Ç–≤–µ—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞"
        case .parseError(let message):
            return "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π: \(message)"
        case .networkError(let error):
            return "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: \(error.localizedDescription)"
        }
    }
}

// MARK: - Connect —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª

/// –ú–æ–¥–µ–ª—å –ª–∞–π–∫–æ–≤ –¥–ª—è CloudKit Public Database
struct ConnectLike: Codable {
    let id: String
    let timestamp: Date
    let deviceIdentifier: String // –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ø–∞–º–∞
    
    init(deviceIdentifier: String) {
        self.id = UUID().uuidString
        self.timestamp = Date()
        self.deviceIdentifier = deviceIdentifier
    }
    
    /// –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ CloudKit CKRecord
    func toCKRecord() -> CKRecord {
        let record = CKRecord(recordType: "ConnectLike")
        record["timestamp"] = timestamp as NSDate
        record["deviceIdentifier"] = deviceIdentifier as NSString
        return record
    }
    
    /// –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑ CloudKit CKRecord
    static func fromCKRecord(_ record: CKRecord) -> ConnectLike? {
        guard let timestamp = record["timestamp"] as? Date,
              let deviceIdentifier = record["deviceIdentifier"] as? String else {
            return nil
        }
        
        return ConnectLike(
            id: record.recordID.recordName,
            timestamp: timestamp,
            deviceIdentifier: deviceIdentifier
        )
    }
    
    private init(id: String, timestamp: Date, deviceIdentifier: String) {
        self.id = id
        self.timestamp = timestamp
        self.deviceIdentifier = deviceIdentifier
    }
}

/// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Connect
struct ConnectStats: Codable {
    let totalLikes: Int
    let lastUpdated: Date
    let bridgesBuilt: Int // –º–µ—Ç–∞—Ñ–æ—Ä–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    
    init(totalLikes: Int = 0, bridgesBuilt: Int = 0) {
        self.totalLikes = totalLikes
        self.lastUpdated = Date()
        self.bridgesBuilt = bridgesBuilt
    }
    
    var bridgesBuiltText: String {
        let bridges = bridgesBuilt
        switch bridges {
        case 0:
            return "–ú—ã –≥–æ—Ç–æ–≤—ã –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—é"
        case 1:
            return "–ü–µ—Ä–≤—ã–π –º–æ—Å—Ç –ø–æ—Å—Ç—Ä–æ–µ–Ω"
        case 2...5:
            return "–ù–∞—á–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
        case 6...10:
            return "–ü–µ—Ä–≤—ã–µ –º–æ—Å—Ç—ã –ø–æ—Å—Ç—Ä–æ–µ–Ω—ã"
        case 11...25:
            return "–°–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫—Ä–µ–ø–Ω—É—Ç"
        case 26...50:
            return "–°–µ—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Ä–∞—Å—à–∏—Ä—è–µ—Ç—Å—è"
        case 51...100:
            return "–ú–æ—Å—Ç—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç –≤—Å–µ—Ö"
        case 101...200:
            return "–ú–æ—â–Ω–∞—è —Å–µ—Ç—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞"
        case 201...350:
            return "–ù–µ—Ä–∞–∑—Ä—É—à–∏–º—ã–µ —Å–≤—è–∑–∏"
        case 351...500:
            return "–ö–æ–º–º—é–Ω–∏—Ç–∏ –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç"
        case 501...750:
            return "–ú–∞—Å—Ç–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è —Å–≤—è–∑–µ–π"
        case 751...1000:
            return "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π —Å—Ç—Ä–æ–∏—Ç–µ–ª—å –º–æ—Å—Ç–æ–≤"
        case 1001...1500:
            return "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Å–≤—è–∑–µ–π"
        case 1501...2000:
            return "–ú—ã —Å–æ–∑–¥–∞–ª–∏ —Å–∏–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ—Å—Ç–≤–æ"
        case 2001...3000:
            return "–ì–µ–Ω–∏–π –∫–æ–Ω–Ω–µ–∫—Ç–∞"
        case 3001...5000:
            return "–ú—ã –ø–µ—Ä–µ–æ—Å–º—ã—Å–ª–∏–ª–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏"
        case 5001...10000:
            return "–õ–∏–¥–µ—Ä —Ü–∏—Ñ—Ä–æ–≤–æ–π —ç–≤–æ–ª—é—Ü–∏–∏"
        default:
            return "–ú—ã —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å"
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∏–≥ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è –¥–ª—è –ø–∞—Å—Ö–∞–ª–∫–∏ –ö–æ–¥–∑–∏–º—ã
    var hasKojimaAchievement: Bool {
        return bridgesBuilt >= 50  // –ü–æ–Ω–∏–∂–µ–Ω–Ω—ã–π –ø–æ—Ä–æ–≥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã–ª–æ 42)
    }
    
    /// –¢–µ–∫—Å—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
    var achievementLevel: String {
        switch bridgesBuilt {
        case 0...5:
            return "–ù–æ–≤–∏—á–æ–∫"
        case 6...25:
            return "–°—Ç—Ä–æ–∏—Ç–µ–ª—å"
        case 26...100:
            return "–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä"
        case 101...500:
            return "–ú–∞—Å—Ç–µ—Ä"
        case 501...1000:
            return "–õ–µ–≥–µ–Ω–¥–∞"
        case 1001...2000:
            return "–ú–∏—Ñ"
        default:
            return "–ë–æ–≥ –ö–æ–Ω–Ω–µ–∫—Ç–∞"
        }
    }
}

